using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace @(Model.Settings.Name).Entities
{
    /// <summary>
    /// マスタメンテ用エンティティの共通項目です。
    /// </summary>
    public class EntityBase
    {
        /// <summary>
        /// 更新ユーザIDを取得、もしくは、設定します。
        /// </summary>
        public long UpdatedUserId { get; set; }

        /// <summary>
        /// 更新ユーザ名を取得、もしくは、設定します。
        /// </summary>
        public string UpdatedBy { get; set; }

        /// <summary>
        /// 更新日時を取得、もしくは、設定します。
        /// </summary>
        public DateTime UpdatedDate { get; set; }

        /// <summary>
        /// 楽観的排他制御を取得、もしくは、設定します。
        /// 手動更新
        /// </summary>
        public long Version { get; set; }

    }
}@{
	// ユニーク制約付きでDbContextを作成します。
	var Index = int.Parse(Model.General.Index); 
	var Mod = Model.RootList[Index];
}
using @(Model.Settings.Name).Entities;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using System.Data;

namespace @(Model.Settings.Name).Infrastructure.Database
{
    public class @(Mod.Name) : DbContext
	{
		private IDbContextTransaction _currentTransaction;

		public @(Mod.Name)(DbContextOptions<@(Mod.Name)> options) : base(options)
		{
		}

		@foreach(var mod in Model.RootList){
		@:// @(mod.Comment)
		@:public DbSet<@(mod.Name)Entity> @(mod.PascalPlural) { get; set; }
		@:
		}

		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			// ユーザ名はユニーク制約を付ける
			modelBuilder.Entity<UserEntity>()
				.HasIndex(m => m.Name)
				.IsUnique();

			// ユニーク制約を付ける
			@foreach(var mod in Model.RootList){
			if(mod.IsMaster){
			var UniqueList = "";
			foreach(var field in mod.FieldList){
			UniqueList += ", x." + field.Name;
			}
			@:modelBuilder.Entity<@(mod.Pascal)Entity>()
			@:	.HasIndex(x => new { x.@(Model.Settings.Id)@(UniqueList) }).IsUnique();
			}
			}
		}
		@if(Model.Settings.IsRapTransaction){
		@:
		@:#region トランザクション処理のラップ
		@:public async Task BeginTransactionAsync()
		@:{
		@:	if (_currentTransaction != null)
		@:	{
		@:		return;
		@:	}
		@:	_currentTransaction = await Database.BeginTransactionAsync(IsolationLevel.ReadCommitted).ConfigureAwait(false);
		@:}
		@:
		@:public async Task CommitTransactionAsync()
		@:{
		@:	try
		@:	{
		@:		await SaveChangesAsync().ConfigureAwait(false);
		@:
		@:		_currentTransaction?.Commit();
		@:	}
		@:	catch
		@:	{
		@:		RollbackTransaction();
		@:		throw;
		@:	}
		@:	finally
		@:	{
		@:		if (_currentTransaction != null)
		@:		{
		@:			_currentTransaction.Dispose();
		@:			_currentTransaction = null;
		@:		}
		@:	}
		@:}
		@:
		@:public void RollbackTransaction()
		@:{
		@:	try
		@:	{
		@:		_currentTransaction?.Rollback();
		@:	}
		@:	finally
		@:	{
		@:		if (_currentTransaction != null)
		@:		{
		@:			_currentTransaction.Dispose();
		@:			_currentTransaction = null;
		@:		}
		@:	}
		@:}
		@:#endregion
		}
	}
}