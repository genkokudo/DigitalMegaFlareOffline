@{
    var Index = int.Parse(Model.General.Index); 
    var Mod = Model.RootList[Index];
    
    var isExistDecimal = false;
    foreach(var field in Mod.FieldList){
        var type = field.Type.Trim('?');
        if(type == "int" || type == "double" || type == "float" || type == "decimal"){
            isExistDecimal = true;
        }
    }
}
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { List@(Mod.Pascal)Module, ListState } from '../../../store/master/@(Mod.Camel)/List';
import { Container, Row, Input, Button, Table } from 'reactstrap';
@if(isExistDecimal){
@:import Utils from "../../../Utils";
}

/*
 * @(Mod.Comment)一覧画面の表示
 */
const List@(Mod.Pascal) = () => {
    // hooksセットアップ
    const dispatch = useDispatch();

    // state取得
    const currentState: ListState = useSelector((state: any) => state.list@(Mod.Pascal));

    // 初回および、サーバ送信データ作成時に実行
    useEffect(() => {
        // ここでfetchする
        fetch('/@(Mod.Pascal)/PostListTable', {
            method: 'post',
            body: currentState.formData,
            credentials: 'include'
        }).then(function (response) {
            if (response.status !== 200) {
                alert(`サーバ処理で何か失敗したようです`);
            }
            // JSONメッセージを取り出す
            response.json().then(function (data) {
                // コールバック結果を画面に反映させる
                dispatch(List@(Mod.Pascal)Module.actions.setData(data));
            }).catch(function (err) {
                alert(`レスポンスはありませんでした: ${err}`);
            });
        }).catch(function (err) {
            alert(`error: ${err}`);
        });
    }, [currentState.postTrigger]); // 第2引数の値が変化すると実行

    // データ一覧表示
    function body() {
        var list = [];

        // 件数分繰り返し
        for (var i in currentState.@(Mod.CamelPlural)) {
            const @(Mod.Camel) = currentState.@(Mod.CamelPlural)[i];
            const isDel = currentState.@(Mod.CamelPlural)[i].isDeleted;
            const isEdit = currentState.@(Mod.CamelPlural)[i].isEditMode;
            const isEdited = currentState.@(Mod.CamelPlural)[i].isEdited;
            const isNg = currentState.@(Mod.CamelPlural)[i].isNgInput;
            const index = i;
            let tbodyClass = isEdited ? 'table-success' : '';
            tbodyClass = isEdit ? 'table-warning' : tbodyClass;
            tbodyClass = isDel ? 'table-danger' : tbodyClass;
            list.push(
                <tbody key={`tbody_${i}`} className={tbodyClass}>
                    {/* 1行 */}
                    <tr key={`tr_${i}`}>
                        {/* 編集項目（必須入力） */}
                        <td key={`td_order_${i}`}>
                            {!isEdit && <p className={'input-number'}>{@(Mod.Camel).order}</p>}
                            {isEdit && <Input type="number" className={'input-number'} value={@(Mod.Camel).order} onChange={(e) => dispatch(List@(Mod.Pascal)Module.actions.editOrder({ id: index, order: Number(e.currentTarget.value) }))} />}
                        </td>
                        @foreach(var field in Mod.FieldList){
                        // 数値型かどうか判定
                        var type = field.Type.Trim('?');
                        var isNumeric = (type == "int" || type == "double" || type == "decimal" || type == "float");
                            if(isNumeric){
                                // 数値
                                var minValue = "";
                                var maxValue = "";
                                if(field.MaxLength != "" && type == "decimal"){
                                    var decimalLength = field.Decimal;
                                    if(decimalLength == ""){
                                        decimalLength = "0";
                                    }
                                    minValue = " { Utils.calcMinValue( " + field.MaxLength + ", " + decimalLength + ") }";
                                    if(field.Min != ""){
                                        minValue = " min={" + field.Min + "}";
                                    }
                                    maxValue = " { Utils.calcMaxValue( " + field.MaxLength + ", " + decimalLength + ") }";
                                    if(field.Max != ""){
                                        maxValue = " max={" + field.Max + "}";
                                    }
                                }else{
                                    minValue = "";
                                    if(field.Min != ""){
                                        minValue = " min={" + field.Min + "}";
                                    }
                                    maxValue = "";
                                    if(field.Max != ""){
                                        maxValue = " max={" + field.Max + "}";
                                    }
                                }
                                
                                var numstr = "";
                                var step = 1.0;
                                if(field.MaxLength != ""){
                                    var max = 1.0;
                                    var maxLength = int.Parse(field.MaxLength);
                                    for(int i = 0; i < maxLength; i++){
                                        max *= 10.0;
                                    }
                                    max -= 1.0;
                                    
                                    if(field.Decimal != ""){
                                        var decimalLength = int.Parse(field.Decimal);
                                        for(int i = 0; i < decimalLength; i++){
                                            max /= 10.0;
                                            step /= 10.0;
                                        }
                                    }
                                    var min = max * (-1);
                                    
                                    numstr += $"max=\"{max}\" ";
                                    numstr += $"min=\"{min}\" ";
                                }
                                numstr += $"step=\"{step}\" ";
                                
                        @:<td key={`td_@(field.Snake)_${i}`}>
                        @:    {!isEdit && <p>{@(Mod.Camel).@(field.Camel)}</p>}
                        @:    {isEdit && <Input type="number"@(minValue)@(maxValue) @(numstr)value={@(Mod.Camel).@(field.Camel)} onChange={(e) => dispatch(List@(Mod.Pascal)Module.actions.edit@(field.Pascal)({ id: index, text: Number(e.currentTarget.value) }))} />}
                        @:</td>
                            }else{
                            // 文字列
                            var maxLength = "";
                            if(field.MaxLength != ""){
                                maxLength = "maxLength={" + field.MaxLength + "} ";
                            }
                        @:<td key={`td_@(field.Snake)_${i}`}>
                        @:    {!isEdit && <p>{@(Mod.Camel).@(field.Camel)}</p>}
                        @:    {isEdit && <Input type="text" autocomplete="off" @(maxLength)value={@(Mod.Camel).@(field.Camel)} onChange={(e) => dispatch(List@(Mod.Pascal)Module.actions.edit@(field.Pascal)({ id: index, text: e.currentTarget.value }))} />}
                        @:</td>
                            }
                        }
                        <td key={`td_updated_by_${i}`}>
                            <p>{@(Mod.Camel).updatedBy}</p>
                        </td>
                        <td key={`td_updated_date_${i}`}>
                            <p>{@(Mod.Camel).updatedDate}</p>
                        </td>
                        {/* ボタン */}
                        <td key={`td_edit_${i}`}>
                            {!isEdit && <Button className={'btn btn-sm btn-primary'} value={i.toString()} onClick={() => dispatch(List@(Mod.Pascal)Module.actions.editLine(index))} disabled={isDel}>編集</Button>}
                            {isEdit && <Button className={'btn btn-sm btn-primary'} value={i.toString()} onClick={() => dispatch(List@(Mod.Pascal)Module.actions.editLine(index))} disabled={ isDel || isNg }>完了</Button>}
                        </td>
                        <td key={`td_delete_${i}`}>
                            {!isDel && <Button className={'btn btn-sm btn-danger'} onClick={() => dispatch(List@(Mod.Pascal)Module.actions.removeLine(index))}>削除</Button>}
                            {isDel && <Button className={'btn btn-sm btn-primary'} onClick={() => dispatch(List@(Mod.Pascal)Module.actions.removeLine(index))}>取消</Button>}
                        </td>
                        <td key={`td_error_${i}`}>
                            {!isDel && <p className={'text-danger'}>{currentState.@(Mod.CamelPlural)[i].errorMessage}</p>}
                        </td>
                    </tr>
                </tbody>
            );
        }
        return list;
    }

    return (
        <Container>
            {
                <React.Fragment>
                    {/* メッセージ */}
                    <Row><span className={'text-return'}>{currentState.message}</span></Row>
                    <Row><span className={'text-danger text-return'}>{currentState.error}</span></Row>
                    @foreach(var field in Mod.FieldList){
                    if(field.Type == "decimal" && field.MaxLength != ""){
                        var decimalLength = field.Decimal;
                        if(decimalLength == ""){
                            decimalLength = "0";
                        }
                        var minValue = $"Utils.calcMinValue({field.MaxLength}, {decimalLength})";
                        if(field.Min != ""){
                            minValue = field.Min;
                        }
                        var maxValue = $"Utils.calcMaxValue({field.MaxLength}, {decimalLength})";
                        if(field.Max != ""){
                            maxValue = field.Max;
                        }
                    @:<Row><span className={'text-return'}>@(field.Comment)は {@(minValue)} ～ {@(maxValue)} で入力してください。</span></Row>
                    }
                    else if(field.Type == "int" || field.Type == "double" || field.Type == "float"){
                        var minValue = "";
                        if(field.Min != ""){
                            minValue = field.Min;
                        }
                        var maxValue = "";
                        if(field.Max != ""){
                            maxValue = field.Max;
                        }
                        
                        if(minValue != "" && maxValue == ""){
                    @:<Row><span className={'text-return'}>@(field.Comment)は @(minValue) 以上 で入力してください。</span></Row>
                        }
                        if(minValue == "" && maxValue != ""){
                    @:<Row><span className={'text-return'}>@(field.Comment)は @(maxValue) 以下 で入力してください。</span></Row>
                        }
                        if(minValue != "" || maxValue != ""){
                    @:<Row><span className={'text-return'}>@(field.Comment)は @(minValue) ～ @(maxValue) で入力してください。</span></Row>
                        }
                    }
                    }
                    {/* ボタン */}
                    <Button className={'btn btn-primary mt-2'} onClick={() => dispatch(List@(Mod.Pascal)Module.actions.addLine())}>新規追加</Button>
                    {/* 一覧 */}
                    <Table className={'table table-striped table-hover table-responsive'}>
                        <thead>
                            <tr>
                                <th>表示順</th>
                                @foreach(var field in Mod.FieldList){
                                @:<th>@(field.Comment)</th>
                                }
                                <th>更新者</th>
                                <th>更新日時</th>
                                <th>編集</th>
                                <th>削除</th>
                            </tr>
                        </thead>
                        {body()}
                    </Table>
                    <Button className={'btn btn-warning'} disabled={!currentState.isEdited} onClick={() => {
                        if (window.confirm('以上の内容で更新します。よろしいですか？')) {
                            // formdata作ってstateに持たせる、formdataが変化するとuseEffectが反応してPostする。
                            dispatch(List@(Mod.Pascal)Module.actions.makeFormData());
                        }
                    }}>確定</Button>
                </React.Fragment>
            }
        </Container>
    );
};

export default List@(Mod.Pascal);