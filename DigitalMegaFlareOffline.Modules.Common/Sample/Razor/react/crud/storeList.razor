@{
    var Index = int.Parse(Model.General.Index); 
    var Mod = Model.RootList[Index];
    
    var isExistNumber = false;
    var isExistDecimal = false;
    var initValues = "";
    foreach(var field in Mod.FieldList){
        var type = field.Type.Trim('?');
        var name = field.Camel;
        var val = "''";
        if(type == "int" || type == "double" || type == "float"){
            val = "0";
            isExistNumber = true;
        }else if(type == "decimal"){
            val = "0";
            isExistNumber = true;
            isExistDecimal = true;
        }else if(type == "bool"){
            val = "false";
        }
        initValues += $", {name}: {val}";
    }
}
import { createSlice, PayloadAction } from "@@reduxjs/toolkit";
@if(isExistDecimal){
@:import Utils from "../../../Utils";
}

// state
export interface ListState {
    @(Mod.CamelPlural): @(Mod.Pascal)[];
    message: string;  // 正常メッセージ
    error: string;  // エラーメッセージ

    isEdited: boolean;  // この画面で編集していたらtrue
    formData: FormData; // サーバ送信のためのデータ
    postTrigger: number;// この値が変化したらPostする
}

// 補助データ
interface @(Mod.Pascal) {
    @(Mod.Camel)Id: number;
    @foreach(var field in Mod.FieldList){
        var type = field.Type.Trim('?');
        if(type == "int" || type == "double" || type == "float" || type == "decimal"){
            type = "number";
        }else if(type == "bool"){
            type = "boolean";
        }
    @:@(field.Camel): @(type);
    }
    order: number;
    version: number;
    updatedBy: string;
    updatedDate: string;
    isDeleted: boolean;  // この画面で編集したか
    isEditMode: boolean;  // 現在編集中
    isEdited: boolean;  // この画面で編集したか
    isNgInput: boolean;  // 必須入力などで入力NG
    errorMessage: string;  // NGメッセージ
}

// 初期値
const ListInitialState: ListState = {
    @(Mod.CamelPlural): [],
    message: '',
    error: '',

    isEdited: false,  // この画面でいずれかの行を編集したか
    formData: new FormData(),
    postTrigger: 0
};

// 送信可能か判定する
// 入力NGがある場合はfalse
function isEditedState(state: ListState) {
    if (state.@(Mod.CamelPlural).find(data => data.isNgInput && !data.isDeleted)) {
        state.isEdited = false;
    }
    else if (state.@(Mod.CamelPlural).find(data => isEdited(data))) {
        state.isEdited = true;
    }
    else {
        state.isEdited = false;
    }
}
// 削除:1,編集した:2,編集していないまたはNG:0
function isEdited(data: @(Mod.Pascal)) {
    if (data.isDeleted) {
        return 1;
    } else if (data.isEdited || data.isEditMode) {
        return 2;
    }
    return 0;
}

// createSlice() の中では、stateの更新を行っても良い（他ではだめ）
export let List@(Mod.Pascal)Module = createSlice({
    name: "List@(Mod.Pascal)",
    initialState: ListInitialState,
    reducers:   // 処理の定義
    {
        // Fetchしたデータをstateに反映させる
        setData: (state, action: PayloadAction<ListState>) => {
            if (action.payload) {
                state.@(Mod.CamelPlural) = action.payload.@(Mod.CamelPlural);
                state.message = action.payload.message;
                state.error = action.payload.error;
                state.isEdited = false;
                state.formData = new FormData();
            }
            return state;
        },
        // 行を追加する
        addLine: (state) => {
            // 表示順の最大+1を設定
            let orders = state.@(Mod.CamelPlural).map(({ order }) => order);
            var max = Math.max(...orders);
            state.@(Mod.CamelPlural).push({
                @(Mod.Camel)Id: 0, order: max + 1, isDeleted: false, isEditMode: true, isEdited: true
                ,isNgInput: true, errorMessage: '入力がありません', version: 0, updatedBy: '(new)', updatedDate: '(new)'@(initValues)
            });
            isEditedState(state);
            return state;
        },
        // 行を削除する
        removeLine: (state, action: PayloadAction<string>) => {
            state.@(Mod.CamelPlural)[Number(action.payload)].isDeleted = !state.@(Mod.CamelPlural)[Number(action.payload)].isDeleted;
            isEditedState(state);
            return state;
        },
        // 行を編集する
        editLine: (state, action: PayloadAction<string>) => {
            state.@(Mod.CamelPlural)[Number(action.payload)].isEditMode = !state.@(Mod.CamelPlural)[Number(action.payload)].isEditMode;
            state.@(Mod.CamelPlural)[Number(action.payload)].isEdited = true;
            isEditedState(state);
            return state;
        },
        // 各項目の編集
        editOrder: (state, action: PayloadAction<{ id: string, order: number }>) => {
            state.@(Mod.CamelPlural)[Number(action.payload.id)].order = action.payload.order;
            return state;
        },
        @foreach(var field in Mod.FieldList){
        // 数値型かどうか判定
        var type = field.Type.Trim('?');
        var isNumeric = (type == "int" || type == "double" || type == "decimal" || type == "float");
        if(isNumeric){
        @:edit@(field.Pascal): (state, action: PayloadAction<{ id: string, text: number }>) => {
        @:    state.@(Mod.CamelPlural)[Number(action.payload.id)].isNgInput = false;
            if(field.Type == "decimal" && field.MaxLength != ""){
                var decimalLength = field.Decimal;
                if(decimalLength == ""){
                    decimalLength = "0";
                }
        @:    let min = Utils.calcMinValue(@(field.MaxLength), @(decimalLength));
        @:    let max = Utils.calcMaxValue(@(field.MaxLength), @(decimalLength));
        @:    state = checkNumber(state, Number(action.payload.id), action.payload.text, min, max);
            }
            if(!field.IsConflict){
        @:    state = validationNumber(state, Number(action.payload.id), action.payload.text, state.@(Mod.CamelPlural).map(({ @(field.Camel) }) => @(field.Camel)));
            }
        @:    state.@(Mod.CamelPlural)[Number(action.payload.id)].@(field.Camel) = action.payload.text;
        @:    return state;
        @:},
        }else{
        @:edit@(field.Pascal): (state, action: PayloadAction<{ id: string, text: string }>) => {
            if(!field.IsConflict){
        @:    state = validation(state, Number(action.payload.id), action.payload.text, state.@(Mod.CamelPlural).map(({ @(field.Camel) }) => @(field.Camel)));
            }
        @:    state.@(Mod.CamelPlural)[Number(action.payload.id)].@(field.Camel) = action.payload.text;
        @:    return state;
        @:},
        }
        }
        // サーバに送信するためのFormData作成
        // FormDataを変更するとuseEffectによってサーバにPostされる仕組みにしている。
        makeFormData: (state) => {
            var formData = new FormData();
            state.@(Mod.CamelPlural).forEach(@(Mod.Camel) => {
                formData.append('ids', @(Mod.Camel).@(Mod.Camel)Id.toString());
                @foreach(var field in Mod.FieldList){
                var tostring = "";
                if(field.Type.Trim('?') != "string"){
                    tostring = ".toString()";
                }
                @:formData.append('@(field.CamelPlural)', @(Mod.Camel).@(field.Camel)@(tostring));
                }
                formData.append('isEdited', isEdited(@(Mod.Camel)).toString());  // 削除:1,編集した:2,編集していない:0
                formData.append('orders', @(Mod.Camel).order.toString());
                formData.append('versions', @(Mod.Camel).version.toString());
            });

            state.formData = formData;
            state.postTrigger++;
            return state;
        }

    }
});

// 文字列の入力チェックを行う
function validation(state: ListState, id: number, text: string, list: string[]) {
    let tempText = text.trim();
    let isConfirmed = list.some(data => data.trim() === tempText);
    if (tempText == '') {
        // 必須入力チェック
        state.@(Mod.CamelPlural)[id].isNgInput = true;
        state.@(Mod.CamelPlural)[id].errorMessage = '入力がありません';
    } else if (isConfirmed) {
        // 重複入力チェック
        state.@(Mod.CamelPlural)[id].isNgInput = true;
        state.@(Mod.CamelPlural)[id].errorMessage = '他の値と重複しています';
    } else {
        // 異常なし
        state.@(Mod.CamelPlural)[id].isNgInput = false;
        state.@(Mod.CamelPlural)[id].errorMessage = '';
    }
    // 送信可能か判定する
    isEditedState(state);
    return state;
}

@if(isExistNumber){
@:// 数値の入力チェック、重複チェックが必要なもののみ
@:function validationNumber(state: ListState, id: number, text: number, list: number[]) {
@:    if (state.@(Mod.CamelPlural)[id].isNgInput == false) {
@:        let tempText = text;
@:        let isConfirmed = list.some(data => data === tempText);
@:        if (isConfirmed) {
@:            // 重複入力チェック
@:            state.@(Mod.CamelPlural)[id].isNgInput = true;
@:            state.@(Mod.CamelPlural)[id].errorMessage = '他の値と重複しています';
@:        } else {
@:            // 異常なし
@:            state.@(Mod.CamelPlural)[id].isNgInput = false;
@:            state.@(Mod.CamelPlural)[id].errorMessage = '';
@:        }
@:        // 送信可能か判定する
@:        isEditedState(state);
@:    }
@:    return state;
@:}
}

@if(isExistDecimal){
@:// 数値の入力チェック、最大最小チェックが必要なもののみ
@:function checkNumber(state: ListState, id: number, text: number, min: number, max: number) {
@:    if (state.@(Mod.CamelPlural)[id].isNgInput == false) {
@:        let tempText = text;
@:        if (tempText > max) {
@:            // 最大値チェック
@:            state.@(Mod.CamelPlural)[id].isNgInput = true;
@:            state.@(Mod.CamelPlural)[id].errorMessage = '値は' + max + '以下で入力してください';
@:        } else if (tempText < min) {
@:            // 最小値チェック
@:            state.@(Mod.CamelPlural)[id].isNgInput = true;
@:            state.@(Mod.CamelPlural)[id].errorMessage = '値は' + min + '以上で入力してください';
@:        } else {
@:            // 異常なし
@:            state.@(Mod.CamelPlural)[id].errorMessage = '';
@:        }
@:        // 送信可能か判定する
@:        isEditedState(state);
@:    }
@:    return state;
@:}
}